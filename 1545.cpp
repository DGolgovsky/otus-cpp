/** Description
 * 1545. Иероглифы
 * Ограничение времени: 1.0 секунды
 * Ограничение памяти: 64 МБ
 *
 * Вове очень нравится аниме. Он настолько увлекся этим творчеством, что даже научился
 * сносно общаться со своими японскими друзьями на их родном языке.
 * Но вот при электронной переписке Вове до сих пор приходится пользоваться латиницей.
 * Он хочет сразу печатать иероглифы со своей клавиатуры. Сергей, его товарищ по команде,
 * написал маленькое приложение, позволяющее писать иероглифы, набирая при этом на
 * клавиатуре латинские символы. Для этого, так как иероглифов значительно больше, чем
 * букв латинского алфавита, Сергей создал специальный справочник, в котором каждый
 * иероглиф представляется в виде последовательности из двух строчных букв латинского
 * алфавита. Как только программка осознаёт, что набрана последовательность латинских
 * букв, соответствующая некоторому иероглифу, то эта последовательность заменяется
 * соответствующим иероглифом.
 * Когда Вова стал работать с программкой Сергея, ему быстро надоело заглядывать в
 * справочник соответствия комбинаций букв и иероглифов за подсказкой. Помогите Сергею
 * доработать свою программку, чтобы при вводе некоторой латинской буквы на экране
 * автоматически отображалась подсказка, помогающая продолжить ее до корректного иероглифа.
 *
 * Исходные данные:
 * В первой строке находится количество иероглифов в справочнике Сергея N (1 ≤ N ≤ 1000).
 * В следующих N строках содержатся последовательности латинских символов из справочника,
 * соответствующие японским иероглифам, по одной последовательности в строке.
 * Каждая такая последовательность состоит из двух строчных букв латинского алфавита.
 * В следующей строке содержится введенная Вовой буква.
 *
 * Результат:
 * Выведите список иероглифов из справочника, которые начинаются на введенный Вовой
 * символ, по одному в строке в любом порядке. Если таких иероглифов нет,
 * то ничего выводить не надо.
 *
 * Пример:
 * исходные данные
 * 6
 * na
 * no
 * ni
 * ki
 * ka
 * ku
 * k
 * Результат:
 * ka
 * ki
 * ku
 */

#include <iostream>
#include <map>

int main()
{
    std::map<char, std::string> m;

    int n;
    std::cin >> n;
    while (n--) {
        char c1, c2;
        std::cin >> c1 >> c2;
        m[c1].push_back(c2);
    }

    char c;
    std::cin >> c;

    for (int i = 0; i < m[c].size(); ++i)
        std::cout << c << m[c][i] << std::endl;

    return 0;
}

